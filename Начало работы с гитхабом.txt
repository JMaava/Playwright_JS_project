1. Склонировать проект из гитхаба
code-копировать ссылку 
далее или через интерфейс или через консоль (git clone ссылка)

Открыть проект можно открыв pom-файл ВАЖНО

2.Pull залить к себе изменения с сервера
git pull в терминале идеи

3.branch создать локальную ветку
Потому что в мейн ветку внести изменения нельзя, она защищена
Справа снизу - мейн - new branch

vm/test-elements-radioButton (после слеша описание что делается в ветке)

4.На вкладке commit выделяем файлы галочкой, добавляем сообщение коммита
Теперь код файла = коду локального гита

5. push  

6. compare and pull request в гитхабе
create pull request

Ждем CI


Hello! Pls review PR, thank you!
https://github.com/RedRoverSchool/LumaProjectPython_2024_spring/pull/107

После получения 2-х approve

Squash and merge - влить в меин ветку

delete branch

В идее main checked out и pull

РАЗРЕШЕНИЕ КОНФЛИКТОВ + 21 лекция 13-я минута
1.Закрыть ветку, слить изменения и сделать новый ПР
2.ЧЕРЕЗ ИДЕЮ

main-checkout-pull
ветка-checkout- зайти в меню мейн (находясь в ветке)-merge main into...

merge

слева мое, справа чужое, середина - было и итог
Apply
push

ПРИ ПЕРЕКЛЮЧЕНИИ НА ДРУГУЮ ВЕТКУ ОБЯЗАТЕЛЬНО КОММИТ

https://github.com/RedRoverSchool/JenkinsQA_07/pull/209

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
IntellegiaIDEA
Переключиться на другую ветку:
левая панель/pull request
найти нужный pr/checkout
можно изменить название - остается локально; создать

перейти на локальную main/update project
rebase/Ok

вернуться на созданную ветку, выбрать main (удаленный репо), 
правой кнопкой мыши Merge into current (слить ветку в текущую)/Merge

Открылись 3 вкладки
Добавить стрелочкой >> в середину код по очереди (сначала main, затем наша)

Синее - отредактировано автоматически
Apply

Push - появится окно, где коммитов больше, чем было на самом деле/Push
переходим на github

squash and merge
confirm


PyCharm
В PyCharm, Update Project
Подгрузим в нашу ветку обновления из главной ветки (сейчас пока это origin/test)
В списке Remote-веток выбираем нашу origin/test и в выпадающем меню выбираем команду Merge ‘origin/test’ into <ваша ветка>
Процесс прервётся и PyCharm покажет конфликт
Тут мы должны нажать **Merge…** на каждом файле с конфликтом.
Откроется трёхколоночный инструмент разрешения конфликтов

""Если вы пользовались терминалом либо случайно закрыли окно конфликта, то вызовите инструмент вручную через меню Git — Resolve Conflicts…

Первым делом можно, наверное, нажать кнопку с волшебной палочкой (Resolve Simple Conflicts) которая в том числе соберет все изменения с обеих сторон
Кликнем на стрелку справа, чтобы применить (Accept) добавление теста
Пустая строка слева уже не нужна, можно отказаться от неё, нажав на крестик (Ignore)
Затем подправим код по центру, если там есть проблемы.
Когда последний конфликт решен, выскакивает такая подсказка "Save changes and finish merging"
А счётчик конфликтов показывает, что их больше нет
Можно нажать Apply и git status покажет, что конфликты разрешены
Осталось выполнить **`git merge --continue`** чтобы завершить слияние.
Откроется наш любимый редактор vim с заготовкой сообщения коммита.
Можно ничего не менять, а просто выйти с сохранением, нажав последовательно Esc `:wq` и Enter
Увидим, что создался коммит слияния, который мы можем отправить на гитхаб (Push)
Не пугайтесь если увидите тут чужие коммиты, так и должно быть.
Вернемся на страницу с пиаром и обновим экран. У видим, что конфликт исчез и заново запустились проверки.

////////////////////////////////////////////////////////////////////////////////////////////////
НЕ ПРОШЛА ПРОВЕРКА CI
В этом случае, вам нужно будет щелкнуть на Details, и попробовать разобраться, почему проверка завершилась неуспешно. Шаг, где возникла ошибка, будет помечен красным кружочком:
На скрине выше видно, что была допущена синтаксическая ошибка. Из-за этого PR не прошел проверку линтером 
Здесь возник TimeOutException. Это значит, что если использовалось явное ожидание, было превышено время, а ожидаемое событие так и не произошло. Как вариант, можно попробовать увеличить время ожидания. 
Такая ошибка возникает, если попытаться еще раз инициализировать драйвер в своем файле. Не нужно так делать. Просто используйте в своем тестовом методе уже готовую фикстуру:

def test_something(driver):

В общем, если проверка в CI не пройдена, нужно вернуться в Pycharm и внести необходимые правки. Затем сделать commit и push - ваш PR обновится автоматически.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Для того чтобы залить (push) вашу локальную ветку в удаленный репозиторий, если в удаленном репозитории были внесены 
изменения после отделения вашей ветки, вам нужно будет сначала объединить (merge) эти изменения в вашу ветку. 
Вот пошаговая инструкция, которая поможет вам сделать это с использованием Visual Studio Code (VSC) и Git:

Шаг 1: Обновление локального репозитория
Откройте Visual Studio Code.
Откройте панель терминала в VSC (можно найти в меню Вид > Терминал или нажать Ctrl + ').
Убедитесь, что вы находитесь в корне вашего локального Git репозитория. Если нет, перейдите в него с помощью команды:
cd путь/к/вашему/репозиторию

Шаг 2: Получение обновлений из удаленного репозитория
В терминале введите команду для получения обновлений из удаленного репозитория:
git fetch origin
Эта команда загрузит все изменения из удаленного репозитория, которые не были в вашем локальном.

Шаг 3: Объединение изменений
Убедитесь, что вы находитесь в нужной ветке. Вы можете проверить текущую ветку с помощью git branch.
Если вы не находитесь в нужной ветке, переключитесь на нее:
git checkout ваша_ветка
Объедините изменения из основной (обычно master или main) ветки в вашу ветку:
git merge origin/master
или
git merge origin/main
Это объединит все изменения, которые были внесены в удаленный репозиторий после отделения вашей ветки.

Шаг 4: Решение конфликтов (если они возникнут)
Если при объединении возникли конфликты, VSC предоставит возможность решить их прямо в редакторе. 
Вы увидите разные версии файлов, и вам нужно будет выбрать, какие изменения оставить.

Шаг 5: Отправка изменений в удаленный репозиторий
После успешного объединения и решения конфликтов, добавьте измененные файлы:
git add .
Сделайте коммит с объединенными изменениями:
git commit -m "Merge updates from remote"
Отправьте вашу ветку в удаленный репозиторий:
git push origin ваша_ветка
Теперь ваша ветка с обновлениями из удаленного репозитория должна быть успешно отправлена на сервер. 
Убедитесь в этом, проверив состояние вашего репозитория на сайте, где он размещен.














